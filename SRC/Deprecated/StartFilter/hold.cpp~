#include "stdafx.h"
#include "hold.h"


ADTF_FILTER_PLUGIN("Hold Filter", OID_HOLD_FILTER, cHold);


cHold::cHold(const tChar* __info):cFilter(__info)
{

}

cHold::~cHold()
{

}

tResult cHold::Init(tInitStage eStage, __exception)
{
    // never miss calling the parent implementation!!
    RETURN_IF_FAILED(cFilter::Init(eStage, __exception_ptr))
    
    // in StageFirst you can create and register your static pins.
    if (eStage == StageFirst)
    {	
		cObjectPtr<IMediaDescriptionManager> pDescManager;
 		RETURN_IF_FAILED(_runtime->GetObject(OID_ADTF_MEDIA_DESCRIPTION_MANAGER,
                                             	IID_ADTF_MEDIA_DESCRIPTION_MANAGER,
                                             	(tVoid**)&pDescManager,
                                             	__exception_ptr));

		//get description for bool values
    	tChar const * strDescBoolSignalValue = pDescManager->GetMediaDescription("tBoolSignalValue");	
    	RETURN_IF_POINTER_NULL(strDescBoolSignalValue);	
    	cObjectPtr<IMediaType> pTypeBoolSignalValue = new cMediaType(0, 0, 0, "tBoolSignalValue", strDescBoolSignalValue, IMediaDescription::MDF_DDL_DEFAULT_VERSION);
		
		//get description for sensor data pins
        tChar const * strDescSignalValue = pDescManager->GetMediaDescription("tSignalValue");	
        RETURN_IF_POINTER_NULL(strDescSignalValue);	
        //get mediatype for ultrasonic sensor data pins
        cObjectPtr<IMediaType> pTypeSignalValue = new cMediaType(0, 0, 0, "tSignalValue", strDescSignalValue, IMediaDescription::MDF_DDL_DEFAULT_VERSION);

		// StateHoldInput
		RETURN_IF_FAILED(m_iStateHold.Create("State_Hold", pTypeBoolSignalValue, static_cast<IPinEventSink*> (this)));
    	RETURN_IF_FAILED(RegisterPin(&m_iStateHold));
		RETURN_IF_FAILED(pTypeBoolSignalValue->GetInterface(IID_ADTF_MEDIA_TYPE_DESCRIPTION, (tVoid**)&m_pBoolStateHoldInput));

		// ZeroVelocityOutput
		RETURN_IF_FAILED(m_oZeroVelocity.Create("ZeroVelocity", pTypeSignalValue, static_cast<IPinEventSink*> (this)));	
        RETURN_IF_FAILED(RegisterPin(&m_oZeroVelocity));
		RETURN_IF_FAILED(pTypeSignalValue->GetInterface(IID_ADTF_MEDIA_TYPE_DESCRIPTION, (tVoid**)&m_pZeroVelocityOutput));

    }
    else if (eStage == StageNormal)
    {

    }
    else if (eStage == StageGraphReady)
    {

    }

    RETURN_NOERROR;
}

tResult cHold::Shutdown(tInitStage eStage, __exception)
{
   
    if (eStage == StageGraphReady)
    {
    }
    else if (eStage == StageNormal)
    {
    }
    else if (eStage == StageFirst)
    {
    }

    return cFilter::Shutdown(eStage, __exception_ptr);
}

tResult cHold::OnPinEvent(IPin* pSource,
                                           tInt nEventCode,
                                           tInt nParam1,
                                           tInt nParam2,
                                           IMediaSample* pMediaSample)
{
    if (nEventCode == IPinEventSink::PE_MediaSampleReceived)
    {
        RETURN_IF_POINTER_NULL(pMediaSample);

		if (pSource == &m_iStateHold)
        {
			HoldWork(pMediaSample);
        }
    }

    RETURN_NOERROR;
}

tResult cHold::HoldWork(IMediaSample* pMediaSample){

	tBool bValue = tFalse;
	
	{
    	__adtf_sample_read_lock_mediadescription(m_pBoolStateHoldInput ,pMediaSample, pCoder);    
           
		pCoder->GetID("bValue", m_szIDBoolValueStateHoldInput);
		pCoder->GetID("ui32ArduinoTimestamp", m_szIDTimestampStateHoldInput);    		
		pCoder->Get(m_szIDBoolValueStateHoldInput, (tVoid*)&bValue);         
	}
	
	HoldActive = bValue;

	if (HoldActive) 	transmitHold();

	RETURN_NOERROR;
}

tResult cHold::transmitHold(){

    tUInt32 nTimeStamp = 0;
    tFloat32 fZeroSpeed = 0.0;

    cObjectPtr<IMediaSample> pMediaSample;
    AllocMediaSample((tVoid**)&pMediaSample);

    cObjectPtr<IMediaSerializer> pSerializer;
    m_pZeroVelocityOutput->GetMediaSampleSerializer(&pSerializer);
    tInt nSize = pSerializer->GetDeserializedSize();
    pMediaSample->AllocBuffer(nSize);

    cObjectPtr<IMediaCoder> pCoderOutput;

    m_pZeroVelocityOutput->WriteLock(pMediaSample, &pCoderOutput);

    pCoderOutput->Set("f32Value", (tVoid*)&(fZeroSpeed));
    pCoderOutput->Set("ui32ArduinoTimeStamp", (tVoid*)&nTimeStamp);

    m_pZeroVelocityOutput->Unlock(pCoderOutput);

    pNewSample->SetTime(pMediaSample->GetTime());

    m_oZeroVelocity.Transmit(pMediaSample);

	RETURN_NOERROR;
}
