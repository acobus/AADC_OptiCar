/**
*
*ZebraStripes
*
* Date 1.02.2016
*
*/
 
 
#include "stdafx.h"
#include "ZebraStripes.h"
#include "/home/aadc/AADC/src/aadcUser/include/intrinsic_data.h"
#include "/home/aadc/Desktop/AADC Source/src/aadcUser/src/Util/Util.h"

#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"

#include <iostream>

#include <fstream>
#include <cmath>


ADTF_FILTER_PLUGIN("ZebraStripes", OID_ADTF_ZebraStripes, cZebraStripes)

#define ZebraStripes_PROP_CAMERA_OFFSET "ZebraStripes::Camera Offset"
#define ZebraStripes_PROP_TRESHOLD "ZebraStripes::ThresholdValue"
#define ZebraStripes_PROP_ThresholdValueCanny "ZebraStripes::ThresholdValueCanny"
#define ZebraStripes_PROP_ThresholdValueHough "ZebraStripes::ThresholdValueHough"
#define ZebraStripes_PROP_TRESHOLD2 "ZebraStripes::ThresholdValue2"
#define ZebraStripes_PROP_CornerHarrisparamK "ZebraStripes::CornerHarrisparamK"
#define ZebraStripes_PROP_CornerHarrisblockSize "ZebraStripes::CornerHarrisblockSize"
#define ZebraStripes_PROP_CornerHarrisksize "ZebraStripes::CornerHarrisksize"

#define ZebraStripes_PROP_ImagecutWidthLeft "ZebraStripes::ImagecutWidthLeft"
#define ZebraStripes_PROP_ImagecutWidthRight "ZebraStripes::ImagecutWidthRight"
#define ZebraStripes_PROP_ImagecutHeightUp "ZebraStripes::ImagecutHeightUp"
#define ZebraStripes_PROP_ImagecutHeightDown "ZebraStripes::ImagecutHeightDown"


#define ZebraStripes_PROP_SHOW_DEBUG "Common::Show Debug"




#define MAX_FRAMES 400


//TODO 1
//#define LT_ENABLE_CANNY_WINDOWS


cZebraStripes::cZebraStripes(const tChar* __info) : cFilter(__info)
{
	//psPoints.x=0;
	pui8PointsCount    = 0;
	RGBreceived 	   = false;


    
    SetPropertyBool(ZebraStripes_PROP_SHOW_DEBUG, tFalse);
    SetPropertyStr(ZebraStripes_PROP_SHOW_DEBUG NSSUBPROP_DESCRIPTION, "If true, the opencv windows will be shown and the gcl output is enabled.");


	SetPropertyInt(ZebraStripes_PROP_ImagecutWidthLeft, 0);
	SetPropertyInt(ZebraStripes_PROP_ImagecutWidthLeft NSSUBPROP_MIN, 0);
    SetPropertyStr(ZebraStripes_PROP_ImagecutWidthLeft NSSUBPROP_DESCRIPTION, "Cuts the Image...");

	SetPropertyInt(ZebraStripes_PROP_ImagecutWidthRight, 640);
	SetPropertyInt(ZebraStripes_PROP_ImagecutWidthRight NSSUBPROP_MIN, 0);
    SetPropertyStr(ZebraStripes_PROP_ImagecutWidthRight NSSUBPROP_DESCRIPTION, "Cuts the Image...");

	SetPropertyInt(ZebraStripes_PROP_ImagecutHeightUp, 220);
	SetPropertyInt(ZebraStripes_PROP_ImagecutHeightUp NSSUBPROP_MIN, 0);
    SetPropertyStr(ZebraStripes_PROP_ImagecutHeightUp NSSUBPROP_DESCRIPTION, "Cuts the Image...");

	SetPropertyInt(ZebraStripes_PROP_ImagecutHeightDown, 400);
	SetPropertyInt(ZebraStripes_PROP_ImagecutHeightDown NSSUBPROP_MIN, 0);
    SetPropertyStr(ZebraStripes_PROP_ImagecutHeightDown NSSUBPROP_DESCRIPTION, "Cuts the Image...");


    SetPropertyFloat(ZebraStripes_PROP_CAMERA_OFFSET, 15);
    SetPropertyBool(ZebraStripes_PROP_CAMERA_OFFSET NSSUBPROP_ISCHANGEABLE, tTrue);
    SetPropertyStr(ZebraStripes_PROP_CAMERA_OFFSET NSSUBPROP_DESCRIPTION, "The offset of the camera in relation to the center of the car.");


    SetPropertyFloat(ZebraStripes_PROP_TRESHOLD, 0.0001);
    SetPropertyBool(ZebraStripes_PROP_TRESHOLD NSSUBPROP_ISCHANGEABLE, tTrue);
    SetPropertyStr(ZebraStripes_PROP_TRESHOLD NSSUBPROP_DESCRIPTION, "The first threshold value.");

    SetPropertyFloat(ZebraStripes_PROP_ThresholdValueCanny, 50);
    SetPropertyBool(ZebraStripes_PROP_ThresholdValueCanny NSSUBPROP_ISCHANGEABLE, tTrue);
    SetPropertyStr(ZebraStripes_PROP_ThresholdValueCanny NSSUBPROP_DESCRIPTION, "The Thresholdvalue for the Edgedetection");

    SetPropertyFloat(ZebraStripes_PROP_ThresholdValueHough, 80);
    SetPropertyBool(ZebraStripes_PROP_ThresholdValueHough NSSUBPROP_ISCHANGEABLE, tTrue);
    SetPropertyStr(ZebraStripes_PROP_ThresholdValueHough NSSUBPROP_DESCRIPTION, "The Thresholdvalue for the Houghlines");
	
	SetPropertyFloat(ZebraStripes_PROP_TRESHOLD2, 40);
    SetPropertyBool(ZebraStripes_PROP_TRESHOLD2 NSSUBPROP_ISCHANGEABLE, tTrue);
    SetPropertyStr(ZebraStripes_PROP_TRESHOLD2 NSSUBPROP_DESCRIPTION, "The second threshold value.");

	SetPropertyInt(ZebraStripes_PROP_CornerHarrisblockSize, 7);
    SetPropertyBool(ZebraStripes_PROP_CornerHarrisblockSize NSSUBPROP_ISCHANGEABLE, tTrue);
    SetPropertyStr(ZebraStripes_PROP_CornerHarrisblockSize NSSUBPROP_DESCRIPTION, "Harris Neighborhood size");

	SetPropertyInt(ZebraStripes_PROP_CornerHarrisksize, 5);
    SetPropertyBool(ZebraStripes_PROP_CornerHarrisksize NSSUBPROP_ISCHANGEABLE, tTrue);
    SetPropertyStr(ZebraStripes_PROP_CornerHarrisksize NSSUBPROP_DESCRIPTION, "Harris aperture parameter for the sobel operator");

	SetPropertyFloat(ZebraStripes_PROP_CornerHarrisparamK, 0.0001);
    SetPropertyBool(ZebraStripes_PROP_CornerHarrisparamK NSSUBPROP_ISCHANGEABLE, tTrue);
    SetPropertyStr(ZebraStripes_PROP_CornerHarrisparamK NSSUBPROP_DESCRIPTION, "Harris detectos free parameter k");
    


    m_pISignalRegistry = NULL;
}

cZebraStripes::~cZebraStripes()
{
}

tResult cZebraStripes::GetInterface(const tChar* idInterface,
    tVoid** ppvObject)
{
    if (idmatch(idInterface, IID_ADTF_SIGNAL_PROVIDER))
    {
        *ppvObject = static_cast<ISignalProvider*> (this);
    }
    else
    {
        return cFilter::GetInterface(idInterface, ppvObject);
    }

    Ref();

    RETURN_NOERROR;
}

tUInt cZebraStripes::Ref()
{
    return cFilter::Ref();
}

tUInt cZebraStripes::Unref()
{
    return cFilter::Unref();
}

tVoid cZebraStripes::Destroy()
{
    delete this;
}

tResult cZebraStripes::Start(__exception)
{
    return cFilter::Start(__exception_ptr);
}

tResult cZebraStripes::Stop(__exception)
{

// TODO 1
#ifdef LT_ENABLE_CANNY_WINDOWS
    if(m_bShowDebug)
    {
        //destroyWindow("Canny Near");
        //destroyWindow("Canny Far");
        //destroyWindow("RGB Image");
        //destroyWindow("Canny");
        //destroyWindow("GreyScale Image");
        //destroyWindow("Binary Image");
        //destroyWindow("Canny Image");
        //destroyWindow("LaneTracking");  
    }  
#endif    

    return cFilter::Stop(__exception_ptr);
}
tResult cZebraStripes::Init(tInitStage eStage, __exception )
{
    RETURN_IF_FAILED(cFilter::Init(eStage, __exception_ptr));

    if (eStage == StageFirst)
    {
        cObjectPtr<IMediaDescriptionManager> pDescManager;
        RETURN_IF_FAILED(_runtime->GetObject(OID_ADTF_MEDIA_DESCRIPTION_MANAGER,IID_ADTF_MEDIA_DESCRIPTION_MANAGER,(tVoid**)&pDescManager,__exception_ptr));

		// Get description for bool values
    	tChar const * strDescBoolValue = pDescManager->GetMediaDescription("tBoolSignalValue");	
    	RETURN_IF_POINTER_NULL(strDescBoolValue);	
    	cObjectPtr<IMediaType> pTypeBoolValue = new cMediaType(0, 0, 0, "tBoolSignalValue", strDescBoolValue, IMediaDescription::MDF_DDL_DEFAULT_VERSION);

		// Get description for SignalValue
    	tChar const * strDescZebraStripes = pDescManager->GetMediaDescription("tZebraStripesStruct");   
    	RETURN_IF_POINTER_NULL(strDescZebraStripes);    
    	cObjectPtr<IMediaType> pTypeZebraStripes = new cMediaType(0, 0, 0, "tZebraStripesStruct", strDescZebraStripes, IMediaDescription::MDF_DDL_DEFAULT_VERSION);

        // Video Input
        RETURN_IF_FAILED(m_iVideoInputPin.Create("Video_Input", IPin::PD_Input, static_cast<IPinEventSink*>(this)));
        RETURN_IF_FAILED(RegisterPin(&m_iVideoInputPin));

		// Depthimage Input
        RETURN_IF_FAILED(m_iDepthimagePin.Create("Depthimage_Input", IPin::PD_Input, static_cast<IPinEventSink*>(this)));
        RETURN_IF_FAILED(RegisterPin(&m_iDepthimagePin));

		// Start (Input)
    	RETURN_IF_FAILED(m_iStart.Create("Start", pTypeBoolValue, static_cast<IPinEventSink*> (this)));
    	RETURN_IF_FAILED(RegisterPin(&m_iStart));
		RETURN_IF_FAILED(pTypeBoolValue->GetInterface(IID_ADTF_MEDIA_TYPE_DESCRIPTION, (tVoid**)&m_pStartBoolInput)); 


        //GLC Output
        cObjectPtr<IMediaType> pCmdType = NULL;
        RETURN_IF_FAILED(AllocMediaType(&pCmdType, MEDIA_TYPE_COMMAND, MEDIA_SUBTYPE_COMMAND_GCL, __exception_ptr));
        RETURN_IF_FAILED(m_oGCLOutput.Create("GLC_Output",pCmdType, static_cast<IPinEventSink*> (this)));
        RETURN_IF_FAILED(RegisterPin(&m_oGCLOutput));

		// Create Pin for DistanceToCrossingSpot (Output)
		RETURN_IF_FAILED(m_oDistance.Create("DistanceToZebraStripes", pTypeZebraStripes, static_cast<IPinEventSink*> (this)));
		RETURN_IF_FAILED(RegisterPin(&m_oDistance));
		RETURN_IF_FAILED(pTypeZebraStripes->GetInterface(IID_ADTF_MEDIA_TYPE_DESCRIPTION, (tVoid**)&m_pDistance)); 


              
    }
    else if (eStage == StageNormal)
    {
		m_bStartBoolInput = tFalse;
		m_bActive = tFalse;
        m_bFirstFrame = true;
		m_bFirstFrameDepthimage = true;
		m_ZebraStripesOutputSet = tFalse;

        ReadProperties(NULL);
        m_ui8InitCtrl = 0;
		m_iframeCounter = 0;
        
        
        
        if (m_bShowDebug)
        {
        }

    }
    RETURN_NOERROR;
}

tResult cZebraStripes::PropertyChanged(const char* strProperty)
{
    ReadProperties(strProperty);

    RETURN_NOERROR;
}

tResult cZebraStripes::ReadProperties(const tChar* strPropertyName)
{
    
if (NULL == strPropertyName || cString::IsEqual(strPropertyName, ZebraStripes_PROP_CornerHarrisparamK))
    {
		float f;
		f = GetPropertyFloat(ZebraStripes_PROP_CornerHarrisparamK);
		m_nCornerHarrisparamK = static_cast<double>(f);
    }

    if (NULL == strPropertyName || cString::IsEqual(strPropertyName, ZebraStripes_PROP_CornerHarrisblockSize))
    {
        m_nCornerHarrisblockSize = GetPropertyInt(ZebraStripes_PROP_CornerHarrisblockSize);
    }

    if (NULL == strPropertyName || cString::IsEqual(strPropertyName, ZebraStripes_PROP_CornerHarrisksize))
    {
        m_nCornerHarrisksize = GetPropertyInt(ZebraStripes_PROP_CornerHarrisksize);
    }


    if (NULL == strPropertyName || cString::IsEqual(strPropertyName, ZebraStripes_PROP_TRESHOLD))
    {
        m_nThresholdValue = GetPropertyInt(ZebraStripes_PROP_TRESHOLD);
    }

	if (NULL == strPropertyName || cString::IsEqual(strPropertyName, ZebraStripes_PROP_TRESHOLD2))
    {
        m_nThresholdValue2 = GetPropertyInt(ZebraStripes_PROP_TRESHOLD2);
    }
	
    if (NULL == strPropertyName || cString::IsEqual(strPropertyName, ZebraStripes_PROP_SHOW_DEBUG))
    {
        m_bShowDebug = GetPropertyBool(ZebraStripes_PROP_SHOW_DEBUG);
    }

	if (NULL == strPropertyName || cString::IsEqual(strPropertyName, ZebraStripes_PROP_ImagecutWidthLeft))
    {
        m_nImagecutWidthLeft = GetPropertyInt(ZebraStripes_PROP_ImagecutWidthLeft);
	}

	if (NULL == strPropertyName || cString::IsEqual(strPropertyName, ZebraStripes_PROP_ImagecutWidthRight))
    {
        m_nImagecutWidthRight = GetPropertyInt(ZebraStripes_PROP_ImagecutWidthRight);
	}

	if (NULL == strPropertyName || cString::IsEqual(strPropertyName, ZebraStripes_PROP_ImagecutHeightUp))
    {
        m_nImagecutHeightUp = GetPropertyInt(ZebraStripes_PROP_ImagecutHeightUp);
	}

	if (NULL == strPropertyName || cString::IsEqual(strPropertyName, ZebraStripes_PROP_ImagecutHeightDown))
    {
        m_nImagecutHeightDown = GetPropertyInt(ZebraStripes_PROP_ImagecutHeightDown);
	}

	if (NULL == strPropertyName || cString::IsEqual(strPropertyName, ZebraStripes_PROP_ThresholdValueHough))
    {
        m_nThresholdValueHough = GetPropertyInt(ZebraStripes_PROP_ThresholdValueHough);
    }

	if (NULL == strPropertyName || cString::IsEqual(strPropertyName, ZebraStripes_PROP_ThresholdValueCanny))
    {
        m_nThresholdValueCanny = GetPropertyInt(ZebraStripes_PROP_ThresholdValueCanny);
    }


    RETURN_NOERROR;
}

tResult cZebraStripes::Run(tInt nActivationCode, const tVoid* pvUserData, tInt szUserDataSize, ucom::IException** __exception_ptr)
{

    RETURN_NOERROR;
}

tResult cZebraStripes::Shutdown(tInitStage eStage, ucom::IException** __exception_ptr)
{
    if(m_bShowDebug && eStage == cFilter::StageNormal)
    {        
        ucom::cObjectPtr<ISignalRegistry> pSignalRegistry;
        if (IS_OK(_runtime->GetObject(OID_ADTF_SIGNAL_REGISTRY,
            IID_ADTF_SIGNAL_REGISTRY,
            (tVoid**)&pSignalRegistry)))
        {
            // Unregister the provider
            pSignalRegistry->UnregisterSignalProvider(this);
        }
        m_oActive.clear();

        m_oLock.Release();
    }

    
    return cFilter::Shutdown(eStage,__exception_ptr);
}

tResult cZebraStripes::OnPinEvent(IPin* pSource, tInt nEventCode, tInt nParam1, tInt nParam2, IMediaSample* pMediaSample)
{
    
    RETURN_IF_POINTER_NULL(pMediaSample);
    RETURN_IF_POINTER_NULL(pSource);
    if(nEventCode == IPinEventSink::PE_MediaSampleReceived)
    {
        tTimeStamp InputTimeStamp;
        InputTimeStamp = pMediaSample->GetTime();


        if(pSource == &m_iVideoInputPin)
        {
			if(!RGBreceived)//if RGB not received we want RGB
			{
		        //Videoformat
		        if (m_bFirstFrame)
		        {        
		            cObjectPtr<IMediaType> pType;
		            RETURN_IF_FAILED(m_iVideoInputPin.GetMediaType(&pType));
		            cObjectPtr<IMediaTypeVideo> pTypeVideo;
		            RETURN_IF_FAILED(pType->GetInterface(IID_ADTF_MEDIA_TYPE_VIDEO, (tVoid**)&pTypeVideo));
		            const tBitmapFormat* pFormat = pTypeVideo->GetFormat();                                
		            if (pFormat == NULL)
		            {
		                LOG_ERROR("No Bitmap information found on pin \"input\"");
		                RETURN_ERROR(ERR_NOT_SUPPORTED);
		            }
		            m_sInputFormat.nPixelFormat = pFormat->nPixelFormat;
		            m_sInputFormat.nWidth = pFormat->nWidth;
		            m_sInputFormat.nHeight =  pFormat->nHeight;
		            m_sInputFormat.nBitsPerPixel = pFormat->nBitsPerPixel;
		            m_sInputFormat.nBytesPerLine = pFormat->nBytesPerLine;
		            m_sInputFormat.nSize = pFormat->nSize;
		            m_sInputFormat.nPaletteSize = pFormat->nPaletteSize;
            	    m_bFirstFrame = false; 
            	}

            	ProcessInputRGB(pMediaSample, InputTimeStamp);
			}
        }
        if(pSource == &m_iDepthimagePin )
        {
			if(RGBreceived) //If RGB received we want depthimage
			{
		        //Videoformat
		        if (m_bFirstFrameDepthimage)
		        {        
		            cObjectPtr<IMediaType> pType;
		            RETURN_IF_FAILED(m_iDepthimagePin.GetMediaType(&pType));
		            cObjectPtr<IMediaTypeVideo> pTypeVideo;
		            RETURN_IF_FAILED(pType->GetInterface(IID_ADTF_MEDIA_TYPE_VIDEO, (tVoid**)&pTypeVideo));
		            const tBitmapFormat* pFormat = pTypeVideo->GetFormat();                                
		            if (pFormat == NULL)
		            {
		                LOG_ERROR("No Bitmap information found on pin \"input\"");
		                RETURN_ERROR(ERR_NOT_SUPPORTED);
		            }
		            m_sInputFormatDepthimage.nPixelFormat = pFormat->nPixelFormat;
		            m_sInputFormatDepthimage.nWidth = pFormat->nWidth;
		            m_sInputFormatDepthimage.nHeight =  pFormat->nHeight;
		            m_sInputFormatDepthimage.nBitsPerPixel = pFormat->nBitsPerPixel;
		            m_sInputFormatDepthimage.nBytesPerLine = pFormat->nBytesPerLine;
		            m_sInputFormatDepthimage.nSize = pFormat->nSize;
		            m_sInputFormatDepthimage.nPaletteSize = pFormat->nPaletteSize;
            	    m_bFirstFrameDepthimage = false;
            	}

            	ProcessInputDepth(pMediaSample, InputTimeStamp);
			}
        }

        else if(pSource == &m_iStart)
        {
            tBool bValue = tFalse;
            {   // focus for sample read lock
                __adtf_sample_read_lock_mediadescription(m_pStartBoolInput,pMediaSample,pCoder);

				if (!m_bStartBoolInput) {
					pCoder->GetID("bValue", m_szIDValueStartBoolInput);
					m_bStartBoolInput = tTrue;
				}

                pCoder->Get(m_szIDValueStartBoolInput, (tVoid*)&bValue);	
            }

			//LOG_INFO(cString::Format("Status: %i, ID: %i", bValue, m_DRIVING_ID) );

			m_bActive = bValue;
        }
              
        
        RETURN_NOERROR;
    }
    
    RETURN_NOERROR;
}

tResult cZebraStripes::ProcessInputRGB(IMediaSample* pSample, tTimeStamp tsInputTime)
{ if (m_bActive){
/*    if(m_ui8InitCtrl < 10)         // This loop is necessary to boot the car's controller (needs neutral signal for a certain time)
    {
        m_ui8InitCtrl++;
    }
    else 
    {*/
			m_bActive = tFalse; // damit nur ein RGB und Tiefenbild empfangen wird
			m_iframeCounter++;
			
		    // VideoInput
		    RETURN_IF_POINTER_NULL(pSample);

		    const tVoid* l_pSrcBuffer;
		    //char* corners_window="Corners detected";
		
		    /*IplImage* img = cvCreateImageHeader(cvSize(m_sInputFormat.nWidth, m_sInputFormat.nHeight), IPL_DEPTH_8U, 3);
		    RETURN_IF_FAILED(pSample->Lock(&l_pSrcBuffer));
		
		    cvSetData(img, (tVoid*)l_pSrcBuffer, img->widthStep);
		    Mat image(cvarrToMat(img));
		    cvReleaseImage(&img);
		    pSample->Unlock(l_pSrcBuffer);*/
		
		    IplImage* oImg = cvCreateImageHeader(cvSize(m_sInputFormat.nWidth, m_sInputFormat.nHeight), IPL_DEPTH_8U, 3);
		    RETURN_IF_FAILED(pSample->Lock(&l_pSrcBuffer));
		    oImg->imageData = (char*)l_pSrcBuffer;
		    Mat image(cvarrToMat(oImg));
		    cvReleaseImage(&oImg);
		    pSample->Unlock(l_pSrcBuffer);


//----------------Preprocessing-------------------------//
///////////////// Corner detection 
		
		    Mat m_matImage = image(cv::Range(m_nImagecutHeightUp, m_nImagecutHeightDown), cv::Range(m_nImagecutWidthLeft, m_nImagecutWidthRight)).clone(); //Cut Image
			// TODO compress
			cvtColor(m_matImage, m_matImage, CV_RGB2GRAY);// Grey Image
			medianBlur(m_matImage, m_matImage, 3); // reduce noise with edge-preserving filter
			cornerHarris(m_matImage, m_matCorner, m_nCornerHarrisblockSize, m_nCornerHarrisksize, m_nCornerHarrisparamK, BORDER_DEFAULT);// preprocess corners
			threshold(m_matCorner, m_matThres, m_nThresholdValue, 255,THRESH_TOZERO);
			normalize(m_matThres, m_matNormalized, 0, 255, NORM_MINMAX, CV_32FC1,Mat());
			convertScaleAbs(m_matNormalized, m_matNormalized); // Konveriere in 8Bit array. Nehme aus abs
			threshold(m_matNormalized, m_matThres2, m_nThresholdValue2, 255,THRESH_BINARY); 

//////////////// Line detection
		
		Mat m_matCutHough = image(cv::Range(m_nImagecutHeightUpHough, m_nImagecutHeightDownHough), cv::Range(m_nImagecutWidthLeftHough, m_nImagecutWidthRightHough)).clone(); //Cut Image 
        cvtColor(m_matCutHough, m_matCutHough ,CV_RGB2GRAY);// Grey Image 		
		normalize(m_matCutHough,m_matCutHough, 0, 255, NORM_MINMAX, CV_8UC1,Mat());
		convertScaleAbs(m_matCutHough, m_matCutHough); // Konveriere in 8Bit array. Nehme aus abs
		threshold(m_matCutHough, m_matCutHough, 45, 255,THRESH_TOZERO); // delete dark noise	
        medianBlur(m_matCutHough, m_matCutHough,3); // reduce bright noise with edge-preserving filter
        Canny(m_matCutHough, m_matCanny,m_nThresholdValueCanny, m_nThresholdValueCanny, 3, false);// Detect Edges 
		m_lines.clear();
		HoughLines(m_matCanny,m_lines,1,CV_PI/180,m_nThresholdValueHough,0,0);


			
	#ifdef LT_ENABLE_CANNY_WINDOWS
		    //**************** Show Image *************************
		    if(m_bShowDebug)
		    {
		        if(m_ui8Imagecount > 2)
		        {
		            m_ui8Imagecount=0;
		            //imshow("RGB Image", image);
		            //imshow("Canny", m_matThres);
		            //imshow("GreyScale Image", greyNear);
		            //imshow("Binary Image", greythreshNear);
		            //imshow("Canny Image", linecanny);
		            //imshow("Canny Near", m_matLineCannyNear);
		            //imshow("Canny Far", m_matLineCannyFar);
		            waitKey(0);
					sleep(3);
		        }
		        m_ui8Imagecount++;
		    }
		    //********************************************************
	#endif

		    //********** Find horizontal line (for calibration only)**************
		    //tInt edgerow = 0;
		    //for(tInt row=cannysize.height;row>=1;row--)                                                                                                                                                                                  
		    //{            
		    //    if(linecanny.at<uchar>(row,cannysize.width/2)!=0) 
		    //    {    
		    //        edgerow = row;
		    //        row = 0;
		    //    }
		    //}
		    //LOG_INFO(cString::Format("Found edge at row: %i", edgerow));
		    //********************************************************************    

		    //LOG_INFO(cString::Format("lfdnr1: %i",lfdnr1));
			RGBreceived = true;
	}
 //}
	RETURN_NOERROR;            
}

tResult cZebraStripes::ProcessInputDepth(IMediaSample* pSample, tTimeStamp tsInputTime)
{
	// VideoInput
	RETURN_IF_POINTER_NULL(pSample);

	const tVoid* l_pSrcBuffer;

	IplImage* oImg = cvCreateImage(cvSize(m_sInputFormatDepthimage.nWidth, m_sInputFormatDepthimage.nHeight), IPL_DEPTH_16U, 3);
	RETURN_IF_FAILED(pSample->Lock(&l_pSrcBuffer));
	oImg->imageData = (char*)l_pSrcBuffer;
	Mat image(cvarrToMat(oImg));
	cvReleaseImage(&oImg);
	pSample->Unlock(l_pSrcBuffer);

	Mat m_depthImage = Mat(m_sInputFormatDepthimage.nHeight,m_sInputFormatDepthimage.nWidth,CV_16UC1,(tVoid*)l_pSrcBuffer,m_sInputFormatDepthimage.nBytesPerLine);
	
	//Util::CalculateCameraAngle(m_depthImage.at<ushort>(108,160));

	// Transform image
	m_matImageDepth= m_depthImage(cv::Range(m_nImagecutHeightUp/2, m_nImagecutHeightDown/2), cv::Range(m_nImagecutWidthLeft/2, m_nImagecutWidthRight/2)).clone(); //Cut Image

	SearchCorners();
	CreateAndTransmitGCL();
	RGBreceived=false;	
	
	RETURN_NOERROR;            
}



tResult cZebraStripes::ProcessFound()
{        
    RETURN_NOERROR;
}

tResult cZebraStripes::ProcessOutput()
{
    RETURN_NOERROR;
}



tResult cZebraStripes::GetSignalValue(tSignalID nSignalID, tSignalValue * pValue)
{
  
    RETURN_NOERROR;
}

/**
 *   Activates a signal.
 *   Activated signals send their values to the Signal Registry Service.
 */
tResult cZebraStripes::ActivateSignalEvents(tSignalID nSignalID, tTimeStamp nUpdateRate)
{     
    RETURN_NOERROR;
}

/**
 *   Deactivates a signal.
 */
tResult cZebraStripes::DeactivateSignalEvents(tSignalID nSignalID)
{
    RETURN_NOERROR;
}

tResult cZebraStripes::SearchCorners()
{

	pui8PointsCount    = 0;
    Size szImageCutThresSize = m_matThres2.size();
	m_Points.clear(); 
	m_PixelSpot.clear();
	
	// Write corners from Matrix to vector
    for(tInt nColumn=0; nColumn < szImageCutThresSize.width; nColumn++)
    {  
    	for(tInt nRow=0; nRow < szImageCutThresSize.height; nRow++)
    		{  
                 
        	if(m_matThres2.at<uchar>(nRow, nColumn)==255) 
        		{ 
				m_Points.push_back(Point2f(nColumn,nRow));         
            	}
        	}
    }

vector<Point3f> ZebraPoint;
vector<Point3f> ZebraPointHough;
	Point3f corner1;
	Point3f corner2;

	//elimininate pointcloud 
		vector<int> killUs;
		for(size_t i=0;i<m_Points.size();i++)
			{	
			corner1 = Util::ComputeWorldCoordinate(m_Points[i].x, m_Points[i].y,m_matImageDepth.at<ushort>(floor(m_Points[i].y*0.5),floor(m_Points[i].x*0.5)),m_nImagecutHeightUp,m_nImagecutWidthLeft);
			for(size_t j=i+1;j<m_Points.size();j++)
				{
					corner2 = Util::ComputeWorldCoordinate(m_Points[j].x, m_Points[j].y,m_matImageDepth.at<ushort>(floor(m_Points[j].y*0.5), floor(m_Points[j].x*0.5)),m_nImagecutHeightUp,m_nImagecutWidthLeft);
					if(norm(corner1-corner2)<0.07)
						{
						if(norm(corner1) > norm(corner2))
							{ 
							if(find(killUs.begin(), killUs.end(), j) == killUs.end()) killUs.push_back(j);
							}
						else
							{
							if(find(killUs.begin(), killUs.end(), i) == killUs.end()) killUs.push_back(i);
							}						
						}			
				}
			}


	if(!killUs.empty()){
	sort(killUs.begin(),killUs.end(),greater<int>());
	for(size_t i=0;i<killUs.size();i++)
		{
		m_Points.erase(m_Points.begin()+killUs[i]);
		}
	}

/*		// Search actual zebram_Points
		for(size_t i=0;i<m_Points.size();i++)
		{		
			corner1 = Util::ComputeWorldCoordinate(m_Points[i].x, m_Points[i].y,m_matImageDepth.at<ushort>(floor(m_Points[i].y*0.5),floor(m_Points[i].x*0.5)),m_nImagecutHeightUp,m_nImagecutWidthLeft);
			
		 	for(size_t j=i+1;j<m_Points.size();j++)
				{
				corner2 = Util::ComputeWorldCoordinate(m_Points[j].x, m_Points[j].y,m_matImageDepth.at<ushort>(floor(m_Points[j].y*0.5), floor(m_Points[j].x*0.5)),m_nImagecutHeightUp,m_nImagecutWidthLeft);
			
				if(((norm(corner1-corner2)<1.04 && norm(corner1-corner2)>0.89) && corner1.y>0.19 && corner1.y<0.23 && corner2.y>0.19 && corner2.y<0.23 && (corner1.x>0.0 || corner1.x<-0.45) && (corner2.x>0.0 || corner2.x<-0.45)) && (norm(corner1.z-corner2.z)<0.11 || norm(corner1.x-corner2.x)<0.11)){
					// Test if m_Points are valid
					if(corner1.z < 3 && corner2.z <3 && corner1.y > 0.18 && corner2.y > 0.18){
						m_PixelSpot.push_back(Point2f(m_Points[i].y,m_Points[i].x));
						m_PixelSpot.push_back(Point2f(m_Points[j].y,m_Points[j].x));
						ZebraPoint.push_back(corner1);
						ZebraPoint.push_back(corner2);
					}
				}
			}
		}*/

//eliminate Houghline-cloud of Hough
vector<Point2f> HoughGroupL;
vector<Point2f> HoughGroupR;
vector<Point2f> HoughGroupH;
	for(size_t i=0; i<m_lines.size();i++)
		{
					if((m_lines[i][1]*180/M_PI<150) && (m_lines[i][1]*180/M_PI>115))
					{
							HoughGroupR.push_back(Point2f(m_lines[i][0],m_lines[i][1]));		
					}
					else if((m_lines[i][1]*180/M_PI<100) && (m_lines[i][1]*180/M_PI>80))
					{
							HoughGroupH.push_back(Point2f(m_lines[i][0],m_lines[i][1])); 	
					}
					else if((m_lines[i][1]*180/M_PI<80) && (m_lines[i][1]*180/M_PI>40))
					{
							HoughGroupL.push_back(Point2f(m_lines[i][0],m_lines[i][1])); 	

					}
		}


//Calculate representer for HoughGroupR
if(!HoughGroupR.empty())
{
float averageHGR = 0;
m_representerHGR = HoughGroupR[0]; 
	for(size_t i=0; i<HoughGroupR.size();i++)
		{
			averageHGR = averageHGR + HoughGroupR[i].y*180/M_PI;
		}
			averageHGR = averageHGR/HoughGroupR.size();
	for(size_t i=0; i<HoughGroupR.size();i++)
		{
			if(abs(m_representerHGR.y*180/M_PI-averageHGR)>abs(HoughGroupR[i].y*180/M_PI-averageHGR))
			{
				m_representerHGR = HoughGroupR[i];
			}
		}
}


//Calculate representer for HoughGroupL
if(HoughGroupL.size()!=0)
{
float averageHGL = 0;
m_representerHGL = HoughGroupL[0]; 
	for(size_t i=0; i<HoughGroupL.size();i++)
		{
			averageHGL = averageHGL + HoughGroupL[i].y*180/M_PI;
		}
			averageHGL = averageHGL/HoughGroupL.size();

	for(size_t i=0; i<HoughGroupL.size();i++)
		{
			if(abs(m_representerHGL.y*180/M_PI-averageHGL)>abs(HoughGroupL[i].y*180/M_PI-averageHGL))
			{
				m_representerHGL = HoughGroupL[i];
			}
		}
}


//calculate intersection of representer horizontal hougline and representer on right side(crossing corner right front)

	if(!HoughGroupL.empty() && !HoughGroupR.empty() &&  !HoughGroupH.empty())
	{

		Point2f pt1R,pt2R,pt1L,pt2L;
		pt1L.x = cos(m_representerHGL.y)*m_representerHGL.x + 1000*(-sin(m_representerHGL.y));
		pt1L.y = sin(m_representerHGL.y)*m_representerHGL.x + 1000*(cos(m_representerHGL.y));
		pt2L.x = cos(m_representerHGL.y)*m_representerHGL.x - 1000*(-sin(m_representerHGL.y));
		pt2L.y = sin(m_representerHGL.y)*m_representerHGL.x - 1000*(cos(m_representerHGL.y));

		pt1R.x = cos(m_representerHGR.y)*m_representerHGR.x + 1000*(-sin(m_representerHGR.y));
		pt1R.y = sin(m_representerHGR.y)*m_representerHGR.x + 1000*(cos(m_representerHGR.y));
		pt2R.x = cos(m_representerHGR.y)*m_representerHGR.x - 1000*(-sin(m_representerHGR.y));
		pt2R.y = sin(m_representerHGR.y)*m_representerHGR.x - 1000*(cos(m_representerHGR.y));
		for(size_t i=0; i<HoughGroupH.size();i++)
		{
			Point2f pt1H,pt2H;
			pt1R.x = cos(HoughGroupH[i].y)*HoughGroupH[i].x + 1000*(-sin(HoughGroupH[i].y));
			pt1R.y = sin(HoughGroupH[i].y)*HoughGroupH[i].x + 1000*(cos(HoughGroupH[i].y));
			pt2R.x = cos(HoughGroupH[i].y)*HoughGroupH[i].x - 1000*(-sin(HoughGroupH[i].y));
			pt2R.y = sin(HoughGroupH[i].y)*HoughGroupH[i].x - 1000*(cos(HoughGroupH[i].y));
			


			if(pt1R.x == pt2R.x || pt1R.y == pt2R.y || pt1L.x == pt2L.x || pt1L.y == pt2L.y || pt1H.x == pt2H.x || pt1H.y == pt2H.y)
			{
			}
			else
			{
			float m1 = (pt2R.y-pt1R.y)/(pt2R.x-pt1R.x);
			float m2 = (pt2L.y-pt1L.y)/(pt2L.x-pt1L.x);
			float m3 = (pt2H.y-pt1H.y)/(pt2H.x-pt1H.x);
			double b1 = pt2R.y - m1*pt2R.x;
			double b2 = pt2L.y - m2*pt2L.x;
			double b3 = pt2H.y - m3*pt2H.x;
			m_intersecPointsR.push_back(Point2f(cvRound((b3-b1)/(m3-m1)),cvRound(m1*(b3-b1)/(m3-m1)+b1)));
			m_intersecPointsL.push_back(Point2f(cvRound((b3-b2)/(m3-m2)),cvRound(m2*(b3-b2)/(m3-m2)+b2)));
			corner1 = Util::ComputeWorldCoordinate(m_intersecPointsR[i].x, m_intersecPointsR[i].y,m_matImageDepth.at<ushort>(floor(m_intersecPointsR[i].y*0.5),floor(m_intersecPointsR[i].x*0.5)),m_nImagecutHeightUp,m_nImagecutWidthLeft);
			corner2 = Util::ComputeWorldCoordinate(m_intersecPointsL[i].x, m_intersecPointsL[i].y,m_matImageDepth.at<ushort>(floor(m_intersecPointsL[i].y*0.5),floor(m_intersecPointsL[i].x*0.5)),m_nImagecutHeightUp,m_nImagecutWidthLeft);			
			m_ZebraStripes.push_back(corner1.z);
			m_ZebraStripes.push_back(corner2.z);
			sort(m_ZebraStripes.begin(),m_ZebraStripes.end(),greater<int>());
			}
		}
	}

	if(m_iframeCounter>MAX_FRAMES)
	{
			//LOG_ERROR(cString::Format("CrossDetection: No Crossing found! UNDEFINED_CROSSING") );
			
			TransmitZebraSpot(vector<float> (-1));
			m_iframeCounter = 0;
			RETURN_NOERROR;
	}
	else if(ZebraPointHough.empty())
	{	
			//LOG_WARNING(cString::Format("CrossDetection: No Crossing found!"));
			// Try again if failed
			m_bActive = tTrue;
	}
	else if(ZebraPointHough[0].z > 2.0 || ZebraPointHough[0].z < 0.5)
	{
		//LOG_WARNING(cString::Format("CrossDetection: No valid Crossing lot found!"));
		// Try again if failed
		m_bActive = tTrue;
 	}
	else
	{

		TransmitZebraSpot(m_ZebraStripes);
		m_iframeCounter = 0;
	}
//LOG_WARNING(cString::Format("CrossDetection: CrossType: %i!",m_CrossType));
	//LOG_INFO(cString::Format("IP: Finished Searching") );
	RETURN_NOERROR;
}


tResult cZebraStripes::CreateAndTransmitGCL()
{
    // just draw gcl if the pin is connected and debug mode is enabled
    if (!m_oGCLOutput.IsConnected() || !m_bShowDebug)
    {
        RETURN_NOERROR;
    }

    // create a mediasample
    cObjectPtr<IMediaSample> pSample;
    RETURN_IF_FAILED(AllocMediaSample((tVoid**)&pSample));

    RETURN_IF_FAILED(pSample->AllocBuffer(8192));

    pSample->SetTime(_clock->GetStreamTime());

    tUInt32* aGCLProc;
    RETURN_IF_FAILED(pSample->WriteLock((tVoid**)&aGCLProc));

    tUInt32* pc = aGCLProc;

//LOG_INFO(cString::Format("GCL: Drawing!") );

    // draw rectangle to scale the video display correctly
    cGCLWriter::StoreCommand(pc, GCL_CMD_FGCOL, cColor(0, 0, 0).GetRGBA());	
    cGCLWriter::StoreCommand(pc, GCL_CMD_DRAWRECT, 0, 0, m_sInputFormat.nWidth, m_sInputFormat.nHeight);

    // draw near and far area
    cGCLWriter::StoreCommand(pc, GCL_CMD_FGCOL, cColor(255, 100, 255).GetRGBA());
	cGCLWriter::StoreCommand(pc, GCL_CMD_DRAWRECT,m_nImagecutWidthLeft , m_nImagecutHeightUp, m_nImagecutWidthRight, m_nImagecutHeightDown);

	cGCLWriter::StoreCommand(pc, GCL_CMD_FGCOL, cColor(0,0,255).GetRGBA());	
		
	for(size_t i=0; i < m_intersecPointsR.size(); i++) 
		{
			cGCLWriter::StoreCommand(pc, GCL_CMD_DRAWRECT,static_cast<tInt16>(m_intersecPointsR[i].x-2) + m_nImagecutWidthLeft , static_cast<tInt16>(m_intersecPointsR[i].y-2) + m_nImagecutHeightUp, static_cast<tInt16>(m_intersecPointsR[i].x+2) + m_nImagecutWidthLeft, static_cast<tInt16>(m_intersecPointsR[i].y+2) + m_nImagecutHeightUp);
		}

	for(size_t i=0; i < m_intersecPointsL.size(); i++) 
		{
			cGCLWriter::StoreCommand(pc, GCL_CMD_DRAWRECT,static_cast<tInt16>(m_intersecPointsL[i].x-2) + m_nImagecutWidthLeft , static_cast<tInt16>(m_intersecPointsL[i].y-2) + m_nImagecutHeightUp, static_cast<tInt16>(m_intersecPointsL[i].x+2) + m_nImagecutWidthLeft, static_cast<tInt16>(m_intersecPointsL[i].y+2) + m_nImagecutHeightUp);
		}


    cGCLWriter::StoreCommand(pc, GCL_CMD_END);

    pSample->Unlock(aGCLProc);

    RETURN_IF_FAILED(m_oGCLOutput.Transmit(pSample));
    RETURN_NOERROR;

}

tResult cZebraStripes::TransmitZebraSpot(vector<float> lot) {

		tUInt32 nTimeStamp = 0;

		cObjectPtr<IMediaSample> pMediaSample;
		AllocMediaSample((tVoid**)&pMediaSample);

		cObjectPtr<IMediaSerializer> pSerializer;
		m_pDistance->GetMediaSampleSerializer(&pSerializer);
		pMediaSample->AllocBuffer(pSerializer->GetDeserializedSize());

		/*fstream superf;
		superf.open("superTest", ios::out|ios::app);
		superf<< "\nbefore Sending\n";*/

		{
			__adtf_sample_write_lock_mediadescription(m_pDistance, pMediaSample, pCoderOutput); 
	
			if(!m_ZebraStripesOutputSet){
				pCoderOutput->GetID("tFloat32", m_sznearDistance);
				pCoderOutput->GetID("tFloat32", m_szfarDistance);
				pCoderOutput->GetID("ui32ArduinoTimestamp", m_szIDTimestampOutput);
				m_ZebraStripesOutputSet = tTrue;
			}
			
			pCoderOutput->Set(m_sznearDistance, (tVoid*)&(lot[0]));
			pCoderOutput->Set(m_szfarDistance, (tVoid*)&(lot[lot.size()-1]));
			pCoderOutput->Set(m_szIDTimestampOutput, (tVoid*)&nTimeStamp);
		
		}
/*
		superf << "IP: Send crossing Lot to DM!!!!";
		superf.close();

		LOG_INFO(cString::Format("IP: Send crossing Lot to DM!!!!") );
*/
		pMediaSample->SetTime(pMediaSample->GetTime());
		m_oDistanceOutput.Transmit(pMediaSample);

	RETURN_NOERROR;
}
